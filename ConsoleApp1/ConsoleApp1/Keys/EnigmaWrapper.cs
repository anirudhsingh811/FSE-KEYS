// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using IntPtr = global::System.IntPtr;

namespace EnigmaWrapper
{
    /// <summary>Closure type used to publish processing results.</summary>
    public unsafe partial class CzmAdminITResult : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal IntPtr args;
            internal IntPtr notify;
            internal IntPtr notify_V2;

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmAdminITResult@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);
        }

        public IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmAdminITResult> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmAdminITResult>();

        protected bool __ownsNativeInstance;

        internal static CzmAdminITResult __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new CzmAdminITResult(native.ToPointer(), skipVTables);
        }

        internal static CzmAdminITResult __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CzmAdminITResult)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CzmAdminITResult __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CzmAdminITResult(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private CzmAdminITResult(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CzmAdminITResult(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        public CzmAdminITResult()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmAdminITResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CzmAdminITResult(global::EnigmaWrapper.CzmAdminITResult _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmAdminITResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::EnigmaWrapper.CzmAdminITResult.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmAdminITResult.__Internal*)_0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Optional arguments</summary>
        public IntPtr Args
        {
            get
            {
                return ((__Internal*)__Instance)->args;
            }

            set
            {
                ((__Internal*)__Instance)->args = (IntPtr)value;
            }
        }

        /// <param name="result">- Passcode validation result</param>
        /// <remarks>Callback function to invoke</remarks>
        public global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError Notify
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->notify;
                return __ptr0 == IntPtr.Zero ? null : (global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError));
            }

            set
            {
                ((__Internal*)__Instance)->notify = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>Callback function to invoke</summary>
        /// <param name="result">- Passcode validation result</param>
        /// <param name="creation">- Point in time which passcode was created in seconds since Unix epoch</param>
        public global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long NotifyV2
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->notify_V2;
                return __ptr0 == IntPtr.Zero ? null : (global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long));
            }

            set
            {
                ((__Internal*)__Instance)->notify_V2 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    /// <summary>Representation of the IT administrator at customer site.</summary>
    public unsafe partial class CzmAdminIT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal global::EnigmaWrapper.CzmAdminITResult.__Internal result;

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmAdminIT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaAdminITMakeInstance", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CzmEnigmaAdminITMakeInstance(IntPtr @return, IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaAdminITValidateDefaultPasscode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::EnigmaWrapper.CzmError CzmEnigmaAdminITValidateDefaultPasscode(IntPtr admin, [MarshalAs(UnmanagedType.LPStr)] string serno, [MarshalAs(UnmanagedType.LPStr)] string pass);
        }

        public IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmAdminIT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmAdminIT>();

        protected bool __ownsNativeInstance;

        internal static CzmAdminIT __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new CzmAdminIT(native.ToPointer(), skipVTables);
        }

        internal static CzmAdminIT __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CzmAdminIT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CzmAdminIT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CzmAdminIT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private CzmAdminIT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CzmAdminIT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        public CzmAdminIT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmAdminIT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CzmAdminIT(global::EnigmaWrapper.CzmAdminIT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmAdminIT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::EnigmaWrapper.CzmAdminIT.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmAdminIT.__Internal*)_0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Returns an initialized instance of #CzmAdminIT</summary>
        /// <param name="result">- closure invoked to publish processing results</param>
        /// <remarks>#CzmAdminIT</remarks>
        public static global::EnigmaWrapper.CzmAdminIT CzmEnigmaAdminITMakeInstance(global::EnigmaWrapper.CzmAdminITResult result)
        {
            if (ReferenceEquals(result, null))
                throw new global::System.ArgumentNullException("result", "Cannot be null because it is passed by value.");
            var __arg0 = result.__Instance;
            var __ret = new global::EnigmaWrapper.CzmAdminIT.__Internal();
            __Internal.CzmEnigmaAdminITMakeInstance(new IntPtr(&__ret), __arg0);
            return global::EnigmaWrapper.CzmAdminIT.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Validates whether the passcode authenticates the customer's IT administrator domain</para>
        /// <para>of the individual device.</para>
        /// </summary>
        /// <param name="admin">- #CzmAdminIT instance</param>
        /// <param name="serno">- Unique serial number of device to check</param>
        /// <param name="pass">- Passcode</param>
        /// <remarks>
        /// <para>#ENIGMA_NOERROR if validation succeeded, an</para>
        /// <para>error code otherwise</para>
        /// </remarks>
        public static global::EnigmaWrapper.CzmError CzmEnigmaAdminITValidateDefaultPasscode(global::EnigmaWrapper.CzmAdminIT admin, string serno, string pass)
        {
            var __arg0 = admin is null ? IntPtr.Zero : admin.__Instance;
            var __ret = __Internal.CzmEnigmaAdminITValidateDefaultPasscode(__arg0, serno, pass);
            return __ret;
        }

        public global::EnigmaWrapper.CzmAdminITResult Result
        {
            get
            {
                return global::EnigmaWrapper.CzmAdminITResult.__CreateInstance(new IntPtr(&((__Internal*)__Instance)->result));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->result = *(global::EnigmaWrapper.CzmAdminITResult.__Internal*)value.__Instance;
            }
        }
    }

    /// <summary>@{</summary>
    public enum CzmError
    {
        /// <summary>Default result code indicating no error.</summary>
        ENIGMA_NOERROR = 0,
        /// <summary>Generic error, unspecified reason.</summary>
        ENIGMA_ERROR = 1,
        /// <summary>An unexpected runtime error occurred.</summary>
        ENIGMA_ERR_RUNTIME_ERROR = 2,
        /// <summary>A function failed to allocate memory.</summary>
        ENIGMA_ERR_OUT_OF_MEMORY = 3,
        /// <summary>The operation is not supported.</summary>
        ENIGMA_ERR_NOT_SUPPORTED = 11,
        /// <summary>One or more arguments are not valid.</summary>
        ENIGMA_ERR_INVALID_ARG = 12,
        /// <summary>The buffer is too small.</summary>
        ENIGMA_ERR_BUFFER_TOO_SMALL = 13,
        /// <summary>The attempt to open the file failed.</summary>
        ENIGMA_ERR_FILE_OPEN_FAILED = 14,
        /// <summary>The attempt to read the file failed.</summary>
        ENIGMA_ERR_FILE_CORRUPT = 15,
        /// <summary>The attempt to open the cryptographic context failed.</summary>
        ENIGMA_ERR_CRYPT_ERROR = 21,
        /// <summary>The attempt to parse the data failed.</summary>
        ENIGMA_ERR_CRYPT_PARSE_ERROR = 22,
        /// <summary>The license key is expired.</summary>
        ENIGMA_ERR_CRYPT_EXPIRED_LICENSE = 23,
        /// <summary>The license key is not valid.</summary>
        ENIGMA_ERR_CRYPT_INVALID_LICENSE = 24,
        ENIGMA_ERR_LAST = 25
    }


    /// <summary>Representation of the trained application specialist at customer site.</summary>
    public unsafe partial class CzmBiomed : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal global::EnigmaWrapper.CzmBiomedResult.__Internal result;

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmBiomed@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaBiomedMakeInstance", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CzmEnigmaBiomedMakeInstance(IntPtr @return, IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaBiomedValidateDefaultPasscode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::EnigmaWrapper.CzmError CzmEnigmaBiomedValidateDefaultPasscode(IntPtr admin, [MarshalAs(UnmanagedType.LPStr)] string serno, [MarshalAs(UnmanagedType.LPStr)] string pass);
        }

        public IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmBiomed> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmBiomed>();

        protected bool __ownsNativeInstance;

        internal static CzmBiomed __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new CzmBiomed(native.ToPointer(), skipVTables);
        }

        internal static CzmBiomed __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CzmBiomed)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CzmBiomed __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CzmBiomed(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private CzmBiomed(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CzmBiomed(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        public CzmBiomed()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmBiomed.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CzmBiomed(global::EnigmaWrapper.CzmBiomed _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmBiomed.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::EnigmaWrapper.CzmBiomed.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmBiomed.__Internal*)_0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Returns an initialized instance of #CzmBiomed</summary>
        /// <param name="result">- closure invoked to publish processing results</param>
        /// <remarks>#CzmBiomed</remarks>
        public static global::EnigmaWrapper.CzmBiomed CzmEnigmaBiomedMakeInstance(global::EnigmaWrapper.CzmBiomedResult result)
        {
            if (ReferenceEquals(result, null))
                throw new global::System.ArgumentNullException("result", "Cannot be null because it is passed by value.");
            var __arg0 = result.__Instance;
            var __ret = new global::EnigmaWrapper.CzmBiomed.__Internal();
            __Internal.CzmEnigmaBiomedMakeInstance(new IntPtr(&__ret), __arg0);
            return global::EnigmaWrapper.CzmBiomed.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Validates whether the passcode authenticates the customer's application specialists domain</para>
        /// <para>of the individual device.</para>
        /// </summary>
        /// <param name="admin">- #CzmBiomed  instance</param>
        /// <param name="serno">- Unique serial number of device to check</param>
        /// <param name="pass">- Passcode</param>
        /// <remarks>
        /// <para>#ENIGMA_NOERROR if validation succeeded, an</para>
        /// <para>error code otherwise</para>
        /// </remarks>
        public static global::EnigmaWrapper.CzmError CzmEnigmaBiomedValidateDefaultPasscode(global::EnigmaWrapper.CzmBiomed admin, string serno, string pass)
        {
            var __arg0 = admin is null ? IntPtr.Zero : admin.__Instance;
            var __ret = __Internal.CzmEnigmaBiomedValidateDefaultPasscode(__arg0, serno, pass);
            return __ret;
        }

        public global::EnigmaWrapper.CzmBiomedResult Result
        {
            get
            {
                return global::EnigmaWrapper.CzmBiomedResult.__CreateInstance(new IntPtr(&((__Internal*)__Instance)->result));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->result = *(global::EnigmaWrapper.CzmBiomedResult.__Internal*)value.__Instance;
            }
        }
    }

    /// <summary>Closure type used to publish processing results.</summary>
    public unsafe partial class CzmBiomedResult : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal IntPtr args;
            internal IntPtr notify;
            internal IntPtr notify_V2;

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmBiomedResult@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);
        }

        public IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmBiomedResult> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmBiomedResult>();

        protected bool __ownsNativeInstance;

        internal static CzmBiomedResult __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new CzmBiomedResult(native.ToPointer(), skipVTables);
        }

        internal static CzmBiomedResult __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CzmBiomedResult)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CzmBiomedResult __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CzmBiomedResult(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private CzmBiomedResult(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CzmBiomedResult(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        public CzmBiomedResult()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmBiomedResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CzmBiomedResult(global::EnigmaWrapper.CzmBiomedResult _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmBiomedResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::EnigmaWrapper.CzmBiomedResult.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmBiomedResult.__Internal*)_0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Optional arguments</summary>
        public IntPtr Args
        {
            get
            {
                return ((__Internal*)__Instance)->args;
            }

            set
            {
                ((__Internal*)__Instance)->args = (IntPtr)value;
            }
        }

        /// <param name="result">- Passcode validation result</param>
        /// <remarks>Callback function to invoke</remarks>
        public global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError Notify
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->notify;
                return __ptr0 == IntPtr.Zero ? null : (global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError));
            }

            set
            {
                ((__Internal*)__Instance)->notify = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>Callback function to invoke</summary>
        /// <param name="result">- Passcode validation result</param>
        /// <param name="creation">- Point in time which passcode was created in seconds since Unix epoch</param>
        public global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long NotifyV2
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->notify_V2;
                return __ptr0 == IntPtr.Zero ? null : (global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long));
            }

            set
            {
                ((__Internal*)__Instance)->notify_V2 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class CzmEnigma
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaInit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::EnigmaWrapper.CzmError CzmEnigmaInit();

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaDeinit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CzmEnigmaDeinit();
        }

        /// <summary>Initializes the <c>ENIGMA</c> unit with its resources and dependencies.</summary>
        /// <remarks>
        /// <para>Setup must be performed before the <c>ENIGMA</c> unit is used the very</para>
        /// <para>first time.</para>
        /// <para>#ENIGMA_NOERROR if success</para>
        /// <para>#CzmEnigmaDeinit</para>
        /// </remarks>
        public static global::EnigmaWrapper.CzmError CzmEnigmaInit()
        {
            var __ret = __Internal.CzmEnigmaInit();
            return __ret;
        }

        /// <summary>Tears down the <c>ENIGMA</c> unit, relinquishing its resources and dependencies.</summary>
        /// <remarks>
        /// <para>Once this function at the outermost calling stack returns, further use of the</para>
        /// <para> <c>ENIGMA</c> unit results in undefined behavior.</para>
        /// <para>#CzmEnigmaInit</para>
        /// </remarks>
        public static void CzmEnigmaDeinit()
        {
            __Internal.CzmEnigmaDeinit();
        }
    }

    /// <summary>Retrieves the version info of the compiled and linked binary artifact.</summary>
    public unsafe partial class CzmVersion : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmVersion@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaVersionGetFileVersion", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::EnigmaWrapper.CzmError CzmEnigmaVersionGetFileVersion(IntPtr info, int* major, int* minor, int* patch, int* build);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaVersionGetVersion", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::EnigmaWrapper.CzmError CzmEnigmaVersionGetVersion(IntPtr info, int* major, int* minor, int* patch);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaVersionGetVersionNumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CzmEnigmaVersionGetVersionNumber(IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaVersionGetVersionString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr CzmEnigmaVersionGetVersionString(IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaVersionGetSourceRev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr CzmEnigmaVersionGetSourceRev(IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaVersionMakeInstance", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CzmEnigmaVersionMakeInstance(IntPtr @return);
        }

        public IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmVersion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmVersion>();

        protected bool __ownsNativeInstance;

        internal static CzmVersion __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new CzmVersion(native.ToPointer(), skipVTables);
        }

        internal static CzmVersion __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CzmVersion)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CzmVersion __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CzmVersion(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private CzmVersion(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CzmVersion(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        public CzmVersion()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmVersion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CzmVersion(global::EnigmaWrapper.CzmVersion _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmVersion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::EnigmaWrapper.CzmVersion.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmVersion.__Internal*)_0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Returns the build version of the binary artifact.</summary>
        /// <param name="info">- #CzmVersion instance</param>
        /// <param name="major">- #ENIGMA_VERSION_MAJOR</param>
        /// <param name="minor">- #ENIGMA_VERSION_MINOR</param>
        /// <param name="patch">- #ENIGMA_VERSION_PATCH</param>
        /// <param name="build">- #ENIGMA_VERSION_BUILD</param>
        /// <remarks>#ENIGMA_NOERROR if success, an error code otherwise</remarks>
        public static global::EnigmaWrapper.CzmError CzmEnigmaVersionGetFileVersion(global::EnigmaWrapper.CzmVersion info, ref int major, ref int minor, ref int patch, ref int build)
        {
            var __arg0 = info is null ? IntPtr.Zero : info.__Instance;
            fixed (int* __major1 = &major)
            {
                var __arg1 = __major1;
                fixed (int* __minor2 = &minor)
                {
                    var __arg2 = __minor2;
                    fixed (int* __patch3 = &patch)
                    {
                        var __arg3 = __patch3;
                        fixed (int* __build4 = &build)
                        {
                            var __arg4 = __build4;
                            var __ret = __Internal.CzmEnigmaVersionGetFileVersion(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>Returns the product version of the binary artifact.</summary>
        /// <param name="info">- #CzmVersion instance</param>
        /// <param name="major">- #ENIGMA_VERSION_MAJOR</param>
        /// <param name="minor">- #ENIGMA_VERSION_MINOR</param>
        /// <param name="patch">- #ENIGMA_VERSION_PATCH</param>
        /// <remarks>#ENIGMA_NOERROR if success, an error code otherwise</remarks>
        public static global::EnigmaWrapper.CzmError CzmEnigmaVersionGetVersion(global::EnigmaWrapper.CzmVersion info, ref int major, ref int minor, ref int patch)
        {
            var __arg0 = info is null ? IntPtr.Zero : info.__Instance;
            fixed (int* __major1 = &major)
            {
                var __arg1 = __major1;
                fixed (int* __minor2 = &minor)
                {
                    var __arg2 = __minor2;
                    fixed (int* __patch3 = &patch)
                    {
                        var __arg3 = __patch3;
                        var __ret = __Internal.CzmEnigmaVersionGetVersion(__arg0, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        /// <summary>Returns the product version of the binary artifact.</summary>
        /// <remarks>#ENIGMA_VERSION_NUMBER</remarks>
        public static int CzmEnigmaVersionGetVersionNumber(global::EnigmaWrapper.CzmVersion info)
        {
            var __arg0 = info is null ? IntPtr.Zero : info.__Instance;
            var __ret = __Internal.CzmEnigmaVersionGetVersionNumber(__arg0);
            return __ret;
        }

        /// <summary>Returns a human-readable string representing the product version of the binary artifact.</summary>
        public static string CzmEnigmaVersionGetVersionString(global::EnigmaWrapper.CzmVersion info)
        {
            var __arg0 = info is null ? IntPtr.Zero : info.__Instance;
            var __ret = __Internal.CzmEnigmaVersionGetVersionString(__arg0);
            return Marshal.PtrToStringAuto(__ret);
        }

        /// <summary>Returns a human-readable string representing the source revision the binary artifact is built from.</summary>
        public static string CzmEnigmaVersionGetSourceRev(global::EnigmaWrapper.CzmVersion info)
        {
            var __arg0 = info is null ? IntPtr.Zero : info.__Instance;
            var __ret = __Internal.CzmEnigmaVersionGetSourceRev(__arg0);
            return Marshal.PtrToStringAuto(__ret);
        }

        /// <summary>Returns an initialized instance of #CzmVersion</summary>
        /// <remarks>#CzmVersion</remarks>
        public static global::EnigmaWrapper.CzmVersion CzmEnigmaVersionMakeInstance
        {
            get
            {
                var __ret = new global::EnigmaWrapper.CzmVersion.__Internal();
                __Internal.CzmEnigmaVersionMakeInstance(new IntPtr(&__ret));
                return global::EnigmaWrapper.CzmVersion.__CreateInstance(__ret);
            }
        }
    }

    /// <summary>Closure type used to publish processing results.</summary>
    public unsafe partial class CzmFactoryResult : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal IntPtr args;
            internal IntPtr notify;
            internal IntPtr notify_V2;

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmFactoryResult@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);
        }

        public IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmFactoryResult> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmFactoryResult>();

        protected bool __ownsNativeInstance;

        internal static CzmFactoryResult __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new CzmFactoryResult(native.ToPointer(), skipVTables);
        }

        internal static CzmFactoryResult __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CzmFactoryResult)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CzmFactoryResult __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CzmFactoryResult(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private CzmFactoryResult(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CzmFactoryResult(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        public CzmFactoryResult()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmFactoryResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CzmFactoryResult(global::EnigmaWrapper.CzmFactoryResult _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmFactoryResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::EnigmaWrapper.CzmFactoryResult.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmFactoryResult.__Internal*)_0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Optional arguments</summary>
        public IntPtr Args
        {
            get
            {
                return ((__Internal*)__Instance)->args;
            }

            set
            {
                ((__Internal*)__Instance)->args = (IntPtr)value;
            }
        }

        /// <param name="result">- Passcode validation result</param>
        /// <remarks>Callback function to invoke</remarks>
        public global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError Notify
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->notify;
                return __ptr0 == IntPtr.Zero ? null : (global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError));
            }

            set
            {
                ((__Internal*)__Instance)->notify = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>Callback function to invoke</summary>
        /// <param name="result">- Passcode validation result</param>
        /// <param name="creation">- Point in time which passcode was created in seconds since Unix epoch</param>
        public global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long_long NotifyV2
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->notify_V2;
                return __ptr0 == IntPtr.Zero ? null : (global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long_long)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::EnigmaWrapper.Delegates.Action_IntPtr_EnigmaWrapper_CzmError_long_long));
            }

            set
            {
                ((__Internal*)__Instance)->notify_V2 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    /// <summary>Representation of the in-house technicians within the assembly line.</summary>
    public unsafe partial class CzmFactory : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal global::EnigmaWrapper.CzmFactoryResult.__Internal result;

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmFactory@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaFactoryMakeInstance", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CzmEnigmaFactoryMakeInstance(IntPtr @return, IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaFactoryValidatePasscode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::EnigmaWrapper.CzmError CzmEnigmaFactoryValidatePasscode(IntPtr admin, long today, [MarshalAs(UnmanagedType.LPArray)] string[] prod, ulong prodCnt, [MarshalAs(UnmanagedType.LPStr)] string pass);

            [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaFactoryValidatePasscodeFromFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::EnigmaWrapper.CzmError CzmEnigmaFactoryValidatePasscodeFromFile(IntPtr admin, long today, [MarshalAs(UnmanagedType.LPArray)] string[] prod, ulong prodCnt, IntPtr root, ulong rootLen);
        }

        public IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmFactory> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmFactory>();

        protected bool __ownsNativeInstance;

        internal static CzmFactory __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new CzmFactory(native.ToPointer(), skipVTables);
        }

        internal static CzmFactory __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CzmFactory)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CzmFactory __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CzmFactory(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private CzmFactory(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CzmFactory(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        public CzmFactory()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmFactory.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CzmFactory(global::EnigmaWrapper.CzmFactory _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmFactory.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::EnigmaWrapper.CzmFactory.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmFactory.__Internal*)_0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Returns an initialized instance of #CzmFactory</summary>
        /// <param name="result">- closure invoked to publish processing results</param>
        /// <remarks>#CzmFactory</remarks>
        public static global::EnigmaWrapper.CzmFactory CzmEnigmaFactoryMakeInstance(global::EnigmaWrapper.CzmFactoryResult result)
        {
            if (ReferenceEquals(result, null))
                throw new global::System.ArgumentNullException("result", "Cannot be null because it is passed by value.");
            var __arg0 = result.__Instance;
            var __ret = new global::EnigmaWrapper.CzmFactory.__Internal();
            __Internal.CzmEnigmaFactoryMakeInstance(new IntPtr(&__ret), __arg0);
            return global::EnigmaWrapper.CzmFactory.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Validates whether the passcode authenticates the in-house technician domain for at least</para>
        /// <para>one product specified.</para>
        /// </summary>
        /// <param name="admin">- #CzmFactory instance</param>
        /// <param name="today">- Current calendar date in seconds since UTC 01-JAN-1970 00:00:00</param>
        /// <param name="prod">- Product codes to check</param>
        /// <param name="pass">- Passcode</param>
        /// <remarks>
        /// <para>Authentication is granted for the defined range of consecutive calendar days.</para>
        /// <para>#ENIGMA_NOERROR if validation succeeded for at least one product</para>
        /// <para>code in</para>
        /// </remarks>
        public static global::EnigmaWrapper.CzmError CzmEnigmaFactoryValidatePasscode(global::EnigmaWrapper.CzmFactory admin, long today, string[] prod, ulong prodCnt, string pass)
        {
            var __arg0 = admin is null ? IntPtr.Zero : admin.__Instance;
            var __ret = __Internal.CzmEnigmaFactoryValidatePasscode(__arg0, today, prod, prodCnt, pass);
            return __ret;
        }

        /// <summary>
        /// <para>Validates whether the passcode stored in a keyfile authenticates the in-house</para>
        /// <para>technician domain for at least one product specified.</para>
        /// </summary>
        /// <param name="admin">- #CzmFactory instance</param>
        /// <param name="today">- Current calendar date in seconds since UTC 01-JAN-1970 00:00:00</param>
        /// <param name="prod">- Product codes to check</param>
        /// <param name="root">- UTF16-encoded path to file storage loading the keyfile from</param>
        /// <remarks>
        /// <para>Authentication is granted for the defined range of consecutive calendar days.</para>
        /// <para>#ENIGMA_NOERROR if validation succeeded for at least one product</para>
        /// <para>code in</para>
        /// </remarks>
        public static global::EnigmaWrapper.CzmError CzmEnigmaFactoryValidatePasscodeFromFile(global::EnigmaWrapper.CzmFactory admin, long today, string[] prod, ulong prodCnt, IntPtr root, ulong rootLen)
        {
            var __arg0 = admin is null ? IntPtr.Zero : admin.__Instance;
            var __ret = __Internal.CzmEnigmaFactoryValidatePasscodeFromFile(__arg0, today, prod, prodCnt, root, rootLen);
            return __ret;
        }

        public global::EnigmaWrapper.CzmFactoryResult Result
        {
            get
            {
                return global::EnigmaWrapper.CzmFactoryResult.__CreateInstance(new IntPtr(&((__Internal*)__Instance)->result));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->result = *(global::EnigmaWrapper.CzmFactoryResult.__Internal*)value.__Instance;
            }
        }
    }

    

    /// <summary>Representation of the field service engineer.</summary>
    //public unsafe partial class CzmService : IDisposable
    //{
    //    [StructLayout(LayoutKind.Sequential, Size = 16)]
    //    public partial struct __Internal
    //    {
    //        internal global::EnigmaWrapper.CzmServiceResult.__Internal result;

    //        [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "??0CzmService@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
    //        internal static extern IntPtr Cctor(IntPtr __instance, IntPtr _0);

    //        [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaServiceMakeInstance", CallingConvention = __CallingConvention.Cdecl)]
    //        internal static extern void CzmEnigmaServiceMakeInstance(IntPtr @return, IntPtr result);

    //        [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaServiceValidateOnedayPasscode", CallingConvention = __CallingConvention.Cdecl)]
    //        internal static extern global::EnigmaWrapper.CzmError CzmEnigmaServiceValidateOnedayPasscode(IntPtr admin, long today, IntPtr user, ulong userLen, [MarshalAs(UnmanagedType.LPArray)] string[] prod, ulong prodCnt, [MarshalAs(UnmanagedType.LPStr)] string pass);

    //        [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaServiceValidateOnedayPasscodeFromFile", CallingConvention = __CallingConvention.Cdecl)]
    //        internal static extern global::EnigmaWrapper.CzmError CzmEnigmaServiceValidateOnedayPasscodeFromFile(IntPtr admin, long today, IntPtr user, ulong userLen, [MarshalAs(UnmanagedType.LPArray)] string[] prod, ulong prodCnt, IntPtr root, ulong rootLen);

    //        [SuppressUnmanagedCodeSecurity, DllImport(@"C:\Users\Customer\Downloads\FSE\Czm_Enigma_2.0.0\build\native\bin\x64\v141\Debug\Enigma.dll", EntryPoint = "CzmEnigmaServiceValidateMasterPasscodeFromFile", CallingConvention = __CallingConvention.Cdecl)]
    //        internal static extern global::EnigmaWrapper.CzmError CzmEnigmaServiceValidateMasterPasscodeFromFile(IntPtr admin, long today, [MarshalAs(UnmanagedType.LPArray)] string[] prod, ulong prodCnt, IntPtr root, ulong rootLen);
    //    }

    //    public IntPtr __Instance { get; protected set; }

    //    internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmService> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::EnigmaWrapper.CzmService>();

    //    protected bool __ownsNativeInstance;

    //    internal static CzmService __CreateInstance(IntPtr native, bool skipVTables = false)
    //    {
    //        return new CzmService(native.ToPointer(), skipVTables);
    //    }

    //    internal static CzmService __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
    //    {
    //        if (native == IntPtr.Zero)
    //            return null;
    //        if (NativeToManagedMap.TryGetValue(native, out var managed))
    //            return (CzmService)managed;
    //        var result = __CreateInstance(native, skipVTables);
    //        if (saveInstance)
    //            NativeToManagedMap[native] = result;
    //        return result;
    //    }

    //    internal static CzmService __CreateInstance(__Internal native, bool skipVTables = false)
    //    {
    //        return new CzmService(native, skipVTables);
    //    }

    //    private static void* __CopyValue(__Internal native)
    //    {
    //        var ret = Marshal.AllocHGlobal(sizeof(__Internal));
    //        *(__Internal*)ret = native;
    //        return ret.ToPointer();
    //    }

    //    private CzmService(__Internal native, bool skipVTables = false)
    //        : this(__CopyValue(native), skipVTables)
    //    {
    //        __ownsNativeInstance = true;
    //        NativeToManagedMap[__Instance] = this;
    //    }

    //    protected CzmService(void* native, bool skipVTables = false)
    //    {
    //        if (native == null)
    //            return;
    //        __Instance = new IntPtr(native);
    //    }

    //    public CzmService()
    //    {
    //        __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmService.__Internal));
    //        __ownsNativeInstance = true;
    //        NativeToManagedMap[__Instance] = this;
    //    }

    //    public CzmService(global::EnigmaWrapper.CzmService _0)
    //    {
    //        __Instance = Marshal.AllocHGlobal(sizeof(global::EnigmaWrapper.CzmService.__Internal));
    //        __ownsNativeInstance = true;
    //        NativeToManagedMap[__Instance] = this;
    //        *((global::EnigmaWrapper.CzmService.__Internal*)__Instance) = *((global::EnigmaWrapper.CzmService.__Internal*)_0.__Instance);
    //    }

    //    public void Dispose()
    //    {
    //        Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
    //    }

    //    partial void DisposePartial(bool disposing);

    //    internal protected virtual void Dispose(bool disposing, bool callNativeDtor)
    //    {
    //        if (__Instance == IntPtr.Zero)
    //            return;
    //        NativeToManagedMap.TryRemove(__Instance, out _);
    //        DisposePartial(disposing);
    //        if (__ownsNativeInstance)
    //            Marshal.FreeHGlobal(__Instance);
    //        __Instance = IntPtr.Zero;
    //    }

    //    /// <summary>Returns an initialized instance of #CzmService</summary>
    //    /// <param name="result">- closure invoked to publish processing results</param>
    //    /// <remarks>#CzmService</remarks>
    //    public static global::EnigmaWrapper.CzmService CzmEnigmaServiceMakeInstance(global::EnigmaWrapper.CzmServiceResult result)
    //    {
    //        if (ReferenceEquals(result, null))
    //            throw new global::System.ArgumentNullException("result", "Cannot be null because it is passed by value.");
    //        var __arg0 = result.__Instance;
    //        var __ret = new global::EnigmaWrapper.CzmService.__Internal();
    //        __Internal.CzmEnigmaServiceMakeInstance(new IntPtr(&__ret), __arg0);
    //        return global::EnigmaWrapper.CzmService.__CreateInstance(__ret);
    //    }

    //    /// <summary>
    //    /// <para>Validates whether the passcode authenticates the field service engineer domain for at least</para>
    //    /// <para>one product specified.</para>
    //    /// </summary>
    //    /// <param name="admin">- #CzmService instance</param>
    //    /// <param name="today">- Current calendar date in seconds since UTC 01-JAN-1970 00:00:00</param>
    //    /// <param name="user">- Service username [UTF16]</param>
    //    /// <param name="prod">- Product codes to check</param>
    //    /// <param name="pass">- Passcode</param>
    //    /// <remarks>
    //    /// <para>Authentication is granted for the single calendar dayonly.</para>
    //    /// <para>#ENIGMA_NOERROR if validation succeeded for at least one product</para>
    //    /// <para>code inand service engineer</para>
    //    /// </remarks>
    //    public static global::EnigmaWrapper.CzmError CzmEnigmaServiceValidateOnedayPasscode(global::EnigmaWrapper.CzmService admin, long today, IntPtr user, ulong userLen, string[] prod, ulong prodCnt, string pass)
    //    {
    //        var __arg0 = admin is null ? IntPtr.Zero : admin.__Instance;
    //        var __ret = __Internal.CzmEnigmaServiceValidateOnedayPasscode(__arg0, today, user, userLen, prod, prodCnt, pass);
    //        return __ret;
    //    }

    //    /// <summary>
    //    /// <para>Validates whether the passcode stored in a keyfile authenticates the field service</para>
    //    /// <para>engineer domain for at least one product specified.</para>
    //    /// </summary>
    //    /// <param name="admin">- #CzmService instance</param>
    //    /// <param name="today">- Current calendar date in seconds since UTC 01-JAN-1970 00:00:00</param>
    //    /// <param name="user">- Service username [UTF16]</param>
    //    /// <param name="prod">- Product codes to check</param>
    //    /// <param name="root">- UTF16-encoded path to file storage loading the keyfile from</param>
    //    /// <remarks>
    //    /// <para>Authentication is granted for the single calendar dayonly.</para>
    //    /// <para>#ENIGMA_NOERROR if validation succeeded for at least one product</para>
    //    /// <para>code inand service engineer</para>
    //    /// </remarks>
    //    public static global::EnigmaWrapper.CzmError CzmEnigmaServiceValidateOnedayPasscodeFromFile(global::EnigmaWrapper.CzmService admin, long today, IntPtr user, ulong userLen, string[] prod, ulong prodCnt, IntPtr root, ulong rootLen)
    //    {
    //        var __arg0 = admin is null ? IntPtr.Zero : admin.__Instance;
    //        var __ret = __Internal.CzmEnigmaServiceValidateOnedayPasscodeFromFile(__arg0, today, user, userLen, prod, prodCnt, root, rootLen);
    //        return __ret;
    //    }

    //    /// <summary>
    //    /// <para>Validates whether the passcode stored in a keyfile authenticates the field service</para>
    //    /// <para>engineer domain for at least one product specified.</para>
    //    /// </summary>
    //    /// <param name="admin">- #CzmService instance</param>
    //    /// <param name="today">- Current calendar date in seconds since UTC 01-JAN-1970 00:00:00</param>
    //    /// <param name="prod">- Product codes to check</param>
    //    /// <param name="root">- UTF16-encoded path to file storage loading the keyfile from</param>
    //    /// <remarks>
    //    /// <para>Authentication is granted for the defined range of consecutive calendar days.</para>
    //    /// <para>#ENIGMA_NOERROR if validation succeeded for at least one product</para>
    //    /// <para>code in</para>
    //    /// </remarks>
    //    public static global::EnigmaWrapper.CzmError CzmEnigmaServiceValidateMasterPasscodeFromFile(global::EnigmaWrapper.CzmService admin, long today, string[] prod, ulong prodCnt, IntPtr root, ulong rootLen)
    //    {
    //        var __arg0 = admin is null ? IntPtr.Zero : admin.__Instance;
    //        var __ret = __Internal.CzmEnigmaServiceValidateMasterPasscodeFromFile(__arg0, today, prod, prodCnt, root, rootLen);
    //        return __ret;
    //    }

    //    public global::EnigmaWrapper.CzmServiceResult Result
    //    {
    //        get
    //        {
    //            return global::EnigmaWrapper.CzmServiceResult.__CreateInstance(new IntPtr(&((__Internal*)__Instance)->result));
    //        }

    //        set
    //        {
    //            if (ReferenceEquals(value, null))
    //                throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
    //            ((__Internal*)__Instance)->result = *(global::EnigmaWrapper.CzmServiceResult.__Internal*)value.__Instance;
    //        }
    //    }
    //}

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_EnigmaWrapper_CzmError(IntPtr self, global::EnigmaWrapper.CzmError result);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_EnigmaWrapper_CzmError_long(IntPtr self, global::EnigmaWrapper.CzmError result, long creation);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_EnigmaWrapper_CzmError_long_long(IntPtr self, global::EnigmaWrapper.CzmError result, long creation, long expiration);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_EnigmaWrapper_CzmError_IntPtr_ulong_long_long(IntPtr self, global::EnigmaWrapper.CzmError result, IntPtr user, ulong userLen, long creation, long expiration);

        public class Response
        {
            public  void Action_IntPtr_EnigmaWrapper_CzmError(IntPtr self, global::EnigmaWrapper.CzmError result)
            {

            }

            public  void Action_IntPtr_EnigmaWrapper_CzmError_long(IntPtr self, global::EnigmaWrapper.CzmError result, long creation)
            {

            }

            public  void Action_IntPtr_EnigmaWrapper_CzmError_long_long(IntPtr self, global::EnigmaWrapper.CzmError result, long creation, long expiration)
            {

            }

            public  void Action_IntPtr_EnigmaWrapper_CzmError_IntPtr_ulong_long_long(IntPtr self, global::EnigmaWrapper.CzmError result, IntPtr user, ulong userLen, long creation, long expiration)
            {

            }
        }
    }
}
